void init(int node, int b, int e)
{
    if (b == e) {
        tree[node] = a[b];
        return;
    }
    int Left = node * 2;
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    init(Left, b, mid);
    init(Right, mid + 1, e);
    sum[node] = sum[Left] + sum[Right];
}

void update(int node, int b, int e, int i, int j, ll x)
{
    if (i > e || j < b)
        return;
    if (b >= i && e <= j)
    {
        sum[node] += ((e - b + 1) * x); 
        prop[node] += x; 
        return;
    }
    int Left = node * 2;
    int Right = (node * 2) + 1;
    int mid = (b + e) / 2;
    update(Left, b, mid, i, j, x);
    update(Right, mid + 1, e, i, j, x);
    sum[node] = sum[Left] + sum[Right] + (e - b + 1) * prop[node];
}

ll query(int node, int b, int e, int i, int j, ll carry = 0)
{
    if (i > e || j < b)
        return 0;

    if (b >= i and e <= j)
        return sum[node] + carry * (e - b + 1); 

    int Left = node << 1;
    int Right = (node << 1) + 1;
    int mid = (b + e) >> 1;

    ll p1 = query(Left, b, mid, i, j, carry + prop[node]); 
    ll p2 = query(Right, mid + 1, e, i, j, carry + prop[node]);

    return p1 + p2;
}